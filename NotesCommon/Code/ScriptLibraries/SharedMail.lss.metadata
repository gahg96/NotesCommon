<?xml version="1.0" encoding="UTF-8"?><note class="filter" maintenanceversion="1.4" replicaid="C1257E57004171E2" version="9.0" xmlns="http://www.lotus.com/dxl">
<noteinfo noteid="346" sequence="1" unid="2615605C065337F1C1257ECB00424CEA">
<created><datetime dst="true">20150925T140410,66+02</datetime></created>
<modified><datetime dst="true">20150925T140411,62+02</datetime></modified>
<revised><datetime dst="true">20150925T140411,61+02</datetime></revised>
<lastaccessed><datetime dst="true">20150925T140411,61+02</datetime></lastaccessed>
<addedtofile><datetime dst="true">20150925T140411,61+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Mariusz Jakubowski/O=Development</name></updatedby>
<wassignedby><name>CN=Mariusz Jakubowski/O=Development</name></wassignedby>
<item name="$TITLE" sign="true"><text>SharedMail</text></item>
<item name="$Flags"><text>s34Q</text></item>
<item name="$PublicAccess" sign="true"><text>1</text></item>
<item name="$DesignerVersion"><text>8.5.3</text></item>


<item name="$ScriptLib_error" sign="true" summary="false"><text>'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Mail sending classes.

    This library is used to create and send e-mails. It contains a global method SendMail 
    which simplifies sending emails. By calling this method you can set the body, subject 
    and recipients of an email and add a document or a database link. In the library there 
    are serveral classes used to set different types of the body of an email. An AbstractMail 
    class is a base class for all email classes. A Mail class is used to send standard Notes 
    emails. An HTMLMail is used to send emails in an HTML format. A FormMail is used 
    to send emails with a form attached or with a form rendered into a RichText item. 
	
%END REM
Option Public
Option Declare

Use "SharedLogging"
Use "SharedEncoding"


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class AbstractMail
Declare Public Class Mail As AbstractMail   
Declare Public Class HTMLMail As AbstractMail
Declare Public Class FormMail As Mail
Declare Public Sub SendMail(ASubject As String, ABody As String, ARecipients As Variant, ADoc As Variant, AComment As String)

'++LotusScript Development Environment:2:5:(Declarations):0:10
' image for document link encoded in base64 (used by html messages)
Const IMG_DOC_LINK_B64= "R0lGODlhEAARAMIEAAQCBPz+BISChMTCxP///////////////yH5BAEAAAQALAAAAAAQABEAAAM/"+_
"SLrc/g/ICQQEgeQghnWAJloeGAwol5VMuBFCLITta9NLiO4ogSsY0a3hEop+vhMvhSzafMTnpkmp" +_
"IiHYrCIBADs="

'---------------------------------------------------------------------------------------------------------------------------------

' mail priority
Public Const MAIL_PRIORITY_LOW = "L"
Public Const MAIL_PRIORITY_NORMAL = "N"
Public Const MAIL_PRIORITY_HIGH = "H"

' delivery reports
Public Const MAIL_DELIVERY_NONE = "N"
Public Const MAIL_DELIVERY_ON_FAILURE = "B"
Public Const MAIL_DELIVERY_CONFIRM = "C"
Public Const MAIL_DELIVERY_TRACE_PATH = "T"



%REM

    Abstract class for sending e-mails.

    @Abstract

%END REM
Public Class AbstractMail
    db As NotesDatabase     
    Public mailDoc As NotesDocument     ' mail document
    
    ' Creates new mail object.
    ' ADb - database in which mails will be created, if nothing current database is used
    Public Sub New(ADb As NotesDatabase)
        If ADb Is Nothing Then
            Dim session As NotesSession
            Set session = New NotesSession  
            Set db = session.CurrentDatabase    
        Else 
            Set db = ADb            
        End If
    End Sub
    
    ' Sets mail subject.
    Public Sub SetSubject(ASubject As String)
        mailDoc.Subject = ASubject
    End Sub
    
    ' Creates new mail document.
    Public Sub NewMail()
        Set mailDoc = db.CreateDocument
        mailDoc.Form = "Memo"       
    End Sub
    
    ' Sets mail content.
    ' @abstract
    Public Sub SetContent(ABody As String)
    End Sub
    
    ' Adds link to a document in mail.
    ' @abstract
    Public Sub AppendDocLink(ADoc As Variant, AComment As String)
    End Sub
    
    ' Embed an attachment.
    ' @abstract
    Public Sub Attach(AFile As String)
    End Sub
    
    ' Sends mail to recipients.
    Public Sub Send(ARecipients As Variant)
        Call mailDoc.Send(False, ARecipients)               
    End Sub
    
    ' Sets CC field.
    Public Sub SetCC(ACopyTo As Variant)
        mailDoc.CopyTo = ACopyTo
    End Sub
    
    ' Sets BCC field.
    Public Sub SetBCC(ACopyTo As Variant)
        mailDoc.BlindCopyTo = ACopyTo
    End Sub
    
    ' Sets the from field.
    Public Sub SetFrom(AFrom As Variant)
        mailDoc.Principal = AFrom
    End Sub
    
    ' Sets mail priority.
    ' @see MAIL_PRIORITY_*
    Public Sub SetPriority(APriority As String)
        mailDoc.DeliveryPriority = APriority
    End Sub
    
    ' Sets mail delivery option.
    ' @see MAIL_DELIVERY_*
    Public Sub SetDeliveryReport(AReport As String)
        mailDoc.DeliveryReport = AReport
    End Sub
    
    ' Sets return receipt flag.
    Public Sub SetReturnReceipt()
        mailDoc.ReturnReceipt = "1"
    End Sub
    
End Class


%REM

    A class for sending standard Lotus Notes mails.

%END REM
Public Class Mail As AbstractMail   
    Public body As NotesRichTextItem        ' mail body
    
    Public Sub New(ADb As NotesDatabase), AbstractMail(ADb)
    End Sub
    
    ' @override
    Public Sub NewMail()
        Call AbstractMail..NewMail()
        Set body = New NotesRichTextItem(mailDoc, "Body")   
    End Sub
    
    ' @override
    Public Sub SetContent(ABody As String)
        Call body.AppendText(ABody)
    End Sub
    
    ' @override
    Public Sub AppendDocLink(ADoc As Variant, AComment As String)
        Call body.AppendDocLink(ADoc, AComment)
    End Sub
    
    ' @override
    Public Sub Attach(AFile As String)
        Call body.EmbedObject(EMBED_ATTACHMENT, "", AFile)
    End Sub 
    
End Class


%REM

    A class for sending mails in html format.

%END REM
Public Class HTMLMail As AbstractMail
    Public MimeMain As NotesMIMEEntity          ' main mime field
    Public MimeHTML As NotesMIMEEntity      ' html body mime field
    Public Stream As NotesStream
    header As NotesMIMEHeader                       ' mime header
    s As NotesSession
    
    Public Sub New(ADb As NotesDatabase), AbstractMail(ADb)
        Set s = New NotesSession()
    End Sub
    
    Public Sub NewMail
        Dim headHTML As NotesMIMEHeader
        s.ConvertMime = False
        Call AbstractMail.. NewMail()
        Set MimeMain = mailDoc.CreateMIMEEntity("Body")
        Set Header = MimeMain.CreateHeader("Content-Type")
        Call Header.SetHeaderVal("multipart/related")
        Set MimeHTML = MimeMain.CreateChildEntity()
        Set headHTML = MimeHTML.CreateHeader("Content-Disposition")
        Call headHTML.SetHeaderVal("inline")
        Set Stream = s.CreateStream()
    End Sub
    
    ' @override
    Public Sub SetContent(ABody As String)
        Call Stream.WriteText(QuotedPrintableEncode(ABody))
    End Sub
    
    ' @override
    Public Sub AppendDocLink(ADoc As Variant, AComment As String)       
        
        If Not ADoc Is Nothing Then
            Call Stream.WriteText(|&lt;a href="| &amp; ADoc.NotesURL &amp; |"&gt;&lt;img src="cid:doclink.gif" alt="| &amp; AComment &amp; |"&gt;&lt;/a&gt;|)
            Call IncludeDocLinkImage()
        End If
    End Sub
    
    ' Adds image "doc link" to the mail
    Sub IncludeDocLinkImage()
        Dim mimeImg As NotesMIMEEntity
        Dim streamImg As NotesStream
        Dim header As NotesMIMEHeader
        
        Set mimeImg = MimeMain.CreateChildEntity()
        Set streamImg = s.CreateStream()
        Call streamImg.Write(Base64Decode(IMG_DOC_LINK_B64))            
        Call mimeImg.SetContentFromBytes(streamImg, "image/gif", ENC_IDENTITY_BINARY)           
        Set header = mimeImg.CreateHeader("Content-ID")
        Call header.SetHeaderVal("&lt;doclink.gif&gt;")       
        Call streamImg.Close()
    End Sub
    
    ' @override
    Public Sub Send(ARecipients As Variant)
        Call MimeHTML.SetContentFromText(Stream, "text/html;charset=windows-1250", ENC_QUOTED_PRINTABLE)        
        Call Stream.Close()
        Call AbstractMail..Send(ARecipients)
        s.ConvertMime = True
    End Sub
    
End Class


%REM

    A class for sending mails using attached forms.

%END REM
Public Class FormMail As Mail
    
    Public Sub New(ADb As NotesDatabase), Mail(ADb)
    End Sub
    
    ' Copies document to richtext field (mail body).
    ' ADoc - document to copy
    ' AForm - form to use when copying
    Public Sub RenderToRT(ADoc As NotesDocument, AForm As String)
        Dim bodyDoc As NotesDocument
        
        Set bodyDoc = db.CreateDocument()
        Call ADoc.CopyAllItems(bodyDoc)
        bodyDoc.Form = AForm
        Call bodyDoc.ComputeWithForm(False, False)
        Call bodyDoc.RenderToRTItem(body)
    End Sub
    
    ' Sends mail with attached form.
    ' A  link to the document is stored in link field.
    ' A field named ParentNoteID is filled with note id to a source document and
    ' a field named ParentUNID with source document unid.
    Public Sub SendWithForm(ADoc As NotesDocument, AForm As String, ALink As Boolean, AComment As String)
        Set mailDoc = db.CreateDocument()
        Call ADoc.CopyAllItems(mailDoc, True)
        mailDoc.Form = AForm
        Call mailDoc.ComputeWithForm(False, False)
        If ALink Then
            Dim item As NotesRichTextItem
            Set item = mailDoc.GetFirstItem("Link")
            If item Is Nothing Then
                Set item = New NotesRichTextItem(mailDoc, "Link")
            End If
            Call item.AppendDocLink(ADoc, AComment)
        End If
        mailDoc.ParentNoteID = ADoc.NoteID
        mailDoc.ParentUNID = ADoc.UniversalID
        Call mailDoc.Send(True)     
    End Sub
    
End Class




'++LotusScript Development Environment:2:2:SendMail:1:8
Public Sub SendMail(ASubject As String, ABody As String, ARecipients As Variant, ADoc As Variant, AComment As String)
    On Error GoTo err1
    Dim MailSender as New Mail(Nothing)
    Call MailSender.NewMail()
    Call MailSender.SetSubject(ASubject)
    Call MailSender.SetContent(ABody)
    If Not ADoc Is Nothing Then
        Call MailSender.AppendDocLink(ADoc, AComment)
    End If
    Call MailSender.Send(ARecipients)
    Exit Sub
err1:
    Call RaiseError("")
    Exit Sub
End Sub
<break/></text></item></note>