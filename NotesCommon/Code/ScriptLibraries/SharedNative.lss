'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library SharedNative
	Created Apr 23, 2013 by Mariusz Jakubowski
	Description: Windows API Wrappers
%END REM
Option Public
Option Declare

Use "SharedLogging"


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Function setClipboardText(pstrText As String) As Boolean
Declare Public Sub UnZipFile(AArchive As String, ADest As String)
Declare Function getClipBoardText(pblnClearClipboard As Boolean, pstrTextOut As String) As Boolean
Declare Public Function BrowseForFolder(APrompt As String) As String

'++LotusScript Development Environment:2:5:(Declarations):0:10
' Gets handle on current window
Declare Function GetActiveWindow Lib "user32.dll" () As Long

Declare Function FindWindow Lib "user32" Alias "FindWindowA" ( ByVal lpClassName As Any, ByVal lpWindowName As Any ) As Long


' BrowseInfo stucture
Type BROWSEINFO
  hwndOwner As Long
  pidlRoot As Long
  pszDisplayName As String
  lpszTitle As String
  ulFlags As Long
  lpfn As Long
  lParam As Long
  iImage As Long
End Type

' BrowseFlags constants
Const BIF_RETURNONLYFSDIRS = &H0001
Const BIF_DONTGOBELOWDOMAIN = &H0002
Const BIF_STATUSTEXT = &H0004
Const BIF_RETURNFSANCESTORS = &H0008
Const BIF_EDITBOX            = &H0010
Const BIF_VALIDATE           = &H0020
Const BIF_BROWSEFORCOMPUTER = &H1000
Const BIF_BROWSEFORPRINTER = &H2000
Const BIF_BROWSEINCLUDEFILES = &H4000

Const STR_MAX_SIZE = 255


' Function to browse for folder (not files)
Declare Function BrowseFolderDlg Lib "shell32.dll" Alias "SHBrowseForFolder" (lpBrowseInfo As BROWSEINFO) As Long

' Function that returns path of selected folder
Declare Function GetPathFromIDList Lib "shell32.dll" Alias "SHGetPathFromIDList"_
(ByVal PointerToIDList As Long, ByVal pszPath As String) As Long


Type OPENFILENAME
    lStructSize As Long
    hwndOwner As Long
    hInstance As Long
    lpstrFilter As String
    lpstrCustomFilter As String
    nMaxCustFilter As Long
    nFilterIndex As Long
    lpstrFile As String
    nMaxFile As Long
    lpstrFileTitle As String
    nMaxFileTitle As Long
    lpstrInitialDir As String
    lpstrTitle As String
    flags As Long
    nFileOffset As Integer
    nFileExtension As Integer
    lpstrDefExt As String
    lCustData As Long
    lpfnHook As Long
    lpTemplateName As String
End Type

Declare Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

'Clipboard Manager Functions
Declare Function GetClipboardData Lib "User32" (ByVal wFormat As Long) As Long 'Note: GetClipboardDataA as aliased in Win32api.txt did not work!
Declare Function OpenClipboard Lib "User32" Alias "OpenClipboard" (ByVal hwnd As Long) As Long
Declare Function CloseClipboard Lib "User32" Alias "CloseClipboard" () As Long

Declare Function EmptyClipboard Lib "user32" Alias "EmptyClipboard" () As Long
Declare Function SetClipboardData Lib "user32" Alias "SetClipboardData" (ByVal wFormat As Long, ByVal hMem As Long) As Long
Declare Function IsClipboardFormatAvailable Lib "user32" Alias "IsClipboardFormatAvailable" (ByVal wFormat As Long) As Long



'Predefined Clipboard Formats
Public Const CF_TEXT = 1

'Memory management functions
Declare Function GlobalLock Lib "kernel32" Alias "GlobalLock" (ByVal hMem As Long) As Long
Declare Function GlobalUnlock Lib "kernel32" Alias "GlobalUnlock" (ByVal hMem As Long) As Long
Declare Function GlobalAllocate Lib "kernel32" Alias "GlobalAlloc" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long

'String Copy function for each of its various parameter configurations lstrcpy(to_string, from_string)
Declare Function lstrcpyLP2Str Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, ByVal lpString2 As Long) As Long
Declare Function lstrcpyStr2Str Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
Declare Function lstrcpyStr2LP Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Long, ByVal lpString2 As String) As Long

'String Length function for each of its various parameter configurations
Declare Function lstrlenLP Lib "kernel32" Alias "lstrlenA" (ByVal lpString As Long) As Long
Declare Function lstrlenStr Lib "kernel32" Alias "lstrlenA" (ByVal lpString As String) As Long

'Keyboard input functions
Declare Function GetFocus Lib "User32" Alias "GetFocus" () As Long



'++LotusScript Development Environment:2:1:setClipboardText:1:8
Function setClipboardText(pstrText As String) As Boolean
    '// 05/21/2004 - Dallas Gimpel
    '//
    '// DESCRIPTION:
    '// This function attempts to programmatically copy the text passed in to the Windows
    '// clipboard (if it can be opened).
    '//
    '// NOTE:
    '// This code is obviously Win/32 specific.
    '//
    '// INPUT:
    '// pstrText - String, text to be copied to the Windows clipboard
    '//
    '// OUTPUT:
    '// Function returns true if text can be successfully copied to the clipboard

    On Error GoTo errorHandler

    '// one of the "standard clipboard formats"
    Const CF_TEXT = 1
    '// global memory flags
    Const GMEM_FIXED& = &H0
    Const GMEM_MOVEABLE& = &H2
    Const GMEM_NOCOMPACT& = &H10
    Const GMEM_NODISCARD& = &H20
    Const GMEM_ZEROINIT& = &H40
    Const GMEM_MODIFY& = &H80
    Const GMEM_DISCARDABLE& = &H100
    Const GMEM_NOT_BANKED& = &H1000
    Const GMEM_SHARE& = &H2000
    Const GMEM_DDESHARE& = &H2000
    Const GMEM_NOTIFY& = &H4000
    Const GMEM_LOWER& = GMEM_NOT_BANKED
    Const GMEM_VALID_FLAGS& = &H7F72
    Const GMEM_INVALID_HANDLE& = &H8000
    Const GHND& = (GMEM_MOVEABLE Or GMEM_ZEROINIT)
    Const GPTR& = (GMEM_FIXED Or GMEM_ZEROINIT)
    Dim lngHWnd As Long
    Dim lngCBStatus As Long
    Dim lngHGMem As Long
    Dim lngGMemPointer As Long
    Dim lngSize As Long
    Dim lngRC As Long

    setClipboardText = False

    '// Get a handle to the current window.
    lngHWnd& = GetActiveWindow()

    '// Determine the size required.
    lngSize& = CLng(Len(pstrText$) + 1)

    '// Attempt to obtain a memory handle.
    lngHGMem& = GlobalAllocate(GPTR&, lngSize&)
    If lngHGMem& = 0 Then
        MsgBox "An error was encountered while attempting to obtain a global memory handle.", , "Error encountered . . ."
        GoTo functionExit
    End If

    '// Attempt to lock the memory handle and store a pointer to it.
    lngGMemPointer& = GlobalLock(lngHGMem&)
    If lngGMemPointer& = 0 Then
        MsgBox "Failed to lock the memory to which the text is to be copied - unable to continue.", , "Error encountered . . ."
        GoTo functionExit
    End If

    '// Copy the string passed into the memory allocated.
    lngRC& = lstrcpyStr2LP(lngGMemPointer&, pstrText$)

    '// Release the memory.
    Call GlobalUnlock(lngHGMem&)

    '// Attempt to open the clipboard.
    lngCBStatus& = OpenClipboard(lngHWnd&)
    If lngCBStatus& = 0 Then
        MsgBox {Could not access the "clipboard" - another application may have it locked.}, , "Error encountered . . ."
        GoTo functionExit
    End If

    '// Always empty the clipboard first.
    lngRC& = EmptyClipboard()

    '// Now attempt to copy the text to the clipboard.
    lngRC& = SetClipboardData(CF_TEXT, lngHGMem&)

    '// Check to see if the text is there.
    lngRC& = IsClipboardFormatAvailable(CF_TEXT)
    If lngRC& = 0 Then
        MsgBox "An error was encountered while attempting to copy the specified text to the clipboard.", , "Error encountered . . ."
    Else
        setClipboardText = True
    End If

functionExit:
    '// Always make sure to close the clipboard (even in the event of an error).
    If Not(lngCBStatus& = 0) Then
        Call CloseClipboard()
        lngCBStatus& = 0
    End If
    Exit Function

errorHandler:
    MsgBox "Error " & Err & ": " & Error$ & " encountered at line " & Erl & " of " & GetThreadInfo(1) & ".", , "Error encountered . . ."
    Print "Error " & Err & ": " & Error$ & " encountered at line " & Erl & " of " & GetThreadInfo(1) & " . . ."
    Resume functionExit
End Function


'++LotusScript Development Environment:2:2:UnZipFile:4:8
%REM
	Extracts specified archive (ZIP file) to a specifed location.
%END REM
Public Sub UnZipFile(AArchive As String, ADest As String)
    Dim objApp As Variant
    Set objApp = CreateObject("Shell.Application")

    Dim objArchive As Variant
    Set objArchive = objApp.NameSpace(AArchive).Items()
    Dim objDest As Variant
    Set objDest = objApp.NameSpace(ADest)

    Call objDest.CopyHere(objArchive)
End Sub



'++LotusScript Development Environment:2:1:getClipBoardText:1:8
Function getClipBoardText(pblnClearClipboard As Boolean, pstrTextOut As String) As Boolean
    '// 05/21/2004 - Dallas Gimpel
    '//
    '// DESCRIPTION:
    '// This function attempts to programmatically open the Windows clipboard and write the
    '// text held in memory (if any exists) to the output parameter.
    '//
    '// Notes from MSDN on the "CF_TEXT" standard clipboard format . . .
    '// "Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A
    '// null character signals the end of the data. Use this format for ANSI text."
    '//
    '// NOTE:
    '// This code is obviously Win/32 specific.
    '//
    '// INPUT:
    '// pblnClearClipboard - Boolean, flag indicating whether or not to clear the clipboard
    '//
    '// OUTPUT:
    '// pstrTextOut - String, receives text (if any can be retrieved) held in the clipboard
    '// Function returns true if text can be successfully retrieved from the clipboard

    On Error GoTo errorHandler

    Const CF_TEXT = 1 '// one of the "standard clipboard formats"
    Const MAXSIZE = 4096
    Dim lngRC As Long
    Dim lngCBStatus As Long
    Dim lngHCBMemory As Long
    Dim lngGMemPointer As Long
    Dim strBuff As String * MAXSIZE

    getClipBoardText = False

    '// Attempt to open the clipboard.
    lngCBStatus& = OpenClipboard(0&)
    If lngCBStatus& = 0 Then
        MsgBox {Unable to access the text in memory (i.e., contents of the "clipboard") - another application may have it locked.}, , "Error encountered . . ."
        GoTo functionExit
    End If

    '// Attempt to get a handle to the text currently held in the clipboard.
    lngHCBMemory& = GetClipboardData(CF_TEXT)
    If lngHCBMemory& = 0 Then
        MsgBox {There is no text available in memory (i.e., copied to the "clipboard") - unable to continue.}, , "No text available . . ."
        GoTo functionExit
    End If

    '// Attempt to lock the memory and store a pointer to it.
    lngGMemPointer& = GlobalLock(lngHCBMemory&)
    If lngGMemPointer& = 0 Then '// no text in memory - close clipboard & exit
        MsgBox "Failed to lock the memory from which the text is to be copied - unable to continue.", , "Error encountered . . ."
        GoTo functionExit
    End If

    '// Copy the in-memory string (by pointer location) into the buffer.
    strBuff$ = Space$(MAXSIZE)
    lngRC& = lstrcpyLP2Str(strBuff$, lngGMemPointer&)
    If lngRC& = 0 Then '// an error has occurred in the copy operation
        MsgBox "An error was encountered while attempting to copy the string from memory - unable to continue.", , "Error encountered . . ."
    Else
        strBuff$ = Mid(strBuff$, 1, InStr(1, strBuff$, Chr$(0), 0) - 1) '// remove the null terminator
        pstrTextOut$ = Trim(strBuff$) '// clean up the string
        If pblnClearClipboard Then
            Call EmptyClipboard() '// clear contents of the clipboard
        End If
        getClipBoardText = True
    End If
    lngRC& = GlobalUnlock(lngHCBMemory&) '// release lock on the memory

functionExit:
    '// Always make sure to close the clipboard (even in the event of an error).
    If Not(lngCBStatus& = 0) Then
        Call CloseClipboard()
        lngCBStatus& = 0
    End If
    Exit Function

errorHandler:
    MsgBox "Error " & Err & ": " & Error$ & " encountered at line " & Erl & " of " & GetThreadInfo(1) & ".", , "Error encountered . . ."
    Print "Error " & Err & ": " & Error$ & " encountered at line " & Erl & " of " & GetThreadInfo(1) & " . . ."
    Resume functionExit
End Function



'++LotusScript Development Environment:2:1:BrowseForFolder:4:8
%REM
	Shows a dialog box to broswse for a folder.
%END REM
Public Function BrowseForFolder(APrompt As String) As String
    Dim mBrowseInfo As BROWSEINFO
    Dim lngPointerToIDList As Long
    Dim lngResult As Long
    Dim strPathBuffer As String
    Dim strReturnPath As String
    Dim vbNullChar As String

    vbNullChar = Chr(0)

    On Error GoTo lblErrs

    mBrowseInfo.hwndOwner = GetActiveWindow()

    ' Set default folder for dialog box (0 = My Computer, 5 = My Documents)
    mBrowseInfo.pidlRoot = 0

    mBrowseInfo.lpszTitle = APrompt
    mBrowseInfo.pszDisplayName = String(STR_MAX_SIZE, Chr(0))
    mBrowseInfo.ulFlags = BIF_RETURNONLYFSDIRS
    lngPointerToIDList = BrowseFolderDlg(mBrowseInfo)

    If lngPointerToIDList <> 0& Then
        strPathBuffer = String(STR_MAX_SIZE, Chr(0))

        ' Get selected path
        lngResult = GetPathFromIDList(ByVal lngPointerToIDList, ByVal strPathBuffer)
        strReturnPath = Left$(strPathBuffer, InStr(strPathBuffer, vbNullChar) - 1)
    End If

    BrowseForFolder = strReturnPath

lblEnd:
    Exit Function

lblErrs:
    Call RaiseError("")
    Exit Function
End Function


